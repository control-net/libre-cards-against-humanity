@page "/"
@implements IAsyncDisposable

@if (_gameState is null || _gameState.LobbyModel is null)
{
    <p>Connecting to a server...</p>
}
else
{
    @if (_gameState.LocalPlayerState != PlayerState.NotInLobby)
    {
        <p>Your ID: @_gameState.LocalPlayerId</p>
    }

    @if (_gameState.LocalPlayerState == PlayerState.NotInLobby)
    {
        <h2>Current Lobby</h2>

        <p>There are @_gameState.LobbyModel.PlayerCount out of @_gameState.LobbyModel.MaximumPlayers player(s) in this lobby.</p>

        <input type="text" @bind-value="_usernameInput" />
        <button @onclick="async () => await JoinGameAsync()">Join Lobby</button>
    }
    else
    {
        <p><b>Players</b></p>

        <table>
            <tr>
                <th>Username</th>
                <th>ID</th>
            </tr>
            @foreach (var player in _gameState.Players)
            {
                <tr>
                    <td>@player.Username</td>
                    <td>@player.Id</td>
                </tr>
            }
        </table>
    }

    @if (_gameState.LocalPlayerState == PlayerState.InLobby)
    {
        <button @onclick="async () => await StartGameAsync()">Start Game</button>
    }
}

<p>
    Status: @_statusMessage
</p>

@if (_gameState?.LocalPlayerState == PlayerState.Playing)
{
    <div class="card card-template">
        <span>@_gameState.TemplateCard</span>
    </div>

    <div class="card-drawer">
        @foreach (var card in _gameState.Cards ?? new CardModel[0])
        {
            <div class="card card-hand">
                <span>@card.Text</span>
            </div>
        }
    </div>
}

@code
{
    private string _usernameInput = string.Empty;

    private HubConnection? _hubConnection;

    private LocalGameState? _gameState;

    private string _statusMessage = "Connecting to a server...";

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:5001/signalr/cardsgame")
            .Build();

        _gameState = new LocalGameState(_hubConnection);
        _gameState.GameStateChanged += (s, args) => StateHasChanged();

        await _hubConnection.StartAsync();

        await _gameState.InitializeAsync();

        _statusMessage = "Hub Connection established";
        StateHasChanged();
    }

    private async ValueTask JoinGameAsync()
    {
        await _hubConnection.SendAsync("Join", _usernameInput);
    }

    private async ValueTask StartGameAsync()
    {
        await _hubConnection.SendAsync("StartGame");
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
